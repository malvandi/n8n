{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "55d04039-d389-4b69-86c9-8994008c7a57",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "jsCode": "function extractMatchesFromHTML(html) {\n    const matches = [];\n    const regex = /<a class=\"video-cover-box\" target=\"_blank\" href=\"([^\"]+)\".*?<img[^>]+alt=\"([^\"]+)\"[^>]+src=\"([^\"]+)\".*?<span class=\"duration\">([^<]+)<\\/span>/gs;\n\n    let match;\n    while ((match = regex.exec(html)) !== null) {\n        const [_, link, altText, image, duration] = match;\n        const matchInfo = parseMatchInfo(altText);\n\n        if(matchInfo === null) continue;\n        matches.push({\n            ...matchInfo,\n            link,\n            coverImage: image,\n            duration\n        });\n    }\n\n    return matches;\n}\n\nfunction parseMatchInfo(altText) {\n    // Check for penalty format (e.g. \"2 (3) - 2 (4)\")\n    const penaltyPattern = /خلاصه بازی (.+) (\\d+) \\((\\d+)\\) - (.+) (\\d+) \\((\\d+)\\)/;\n    const penaltyMatch = altText.match(penaltyPattern);\n\n    if (penaltyMatch) {\n        return {\n            host: penaltyMatch[1].trim(),\n            guest: penaltyMatch[4].trim(),\n            hostGoals: parseInt(penaltyMatch[2]),\n            guestGoals: parseInt(penaltyMatch[5]),\n            hostPenalties: parseInt(penaltyMatch[3]),\n            guestPenalties: parseInt(penaltyMatch[6]),\n            isPenalty: true\n        };\n    }\n\n    // Check for normal format\n    const normalPattern = /خلاصه بازی (.+) (\\d+) - (.+) (\\d+)/;\n    const normalMatch = altText.match(normalPattern);\n\n    if (!normalMatch) {\n        console.log(`Could not parse match info from alt text: ${altText}`);\n        return null\n    }\n\n    return {\n        host: normalMatch[1].trim(),\n        guest: normalMatch[3].trim(),\n        hostGoals: parseInt(normalMatch[2]),\n        guestGoals: parseInt(normalMatch[4]),\n        hostPenalties: 0,\n        guestPenalties: 0,\n        isPenalty: false\n    };\n}\n\nreturn extractMatchesFromHTML($input.all()[0].json.data);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        0
      ],
      "id": "443e6cd1-1e52-4e0c-be27-8ceb1d51e6c9",
      "name": "Code"
    },
    {
      "parameters": {
        "url": "https://www.varzesh3.com/tag/927733/%D8%AE%D9%84%D8%A7%D8%B5%D9%87-%D8%A8%D8%A7%D8%B2%DB%8C?tab=video",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        220,
        0
      ],
      "id": "8f91f261-6e8f-463e-be84-15ac93d87cee",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        660,
        0
      ],
      "id": "980ce8cc-391a-4a28-a810-6f9ac7e158cb",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "url": "={{ $input.all()[0].json.link }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        880,
        100
      ],
      "id": "077d92e3-87f2-4db1-a1d3-621937acb0d2",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "jsCode": "function extractVideoData(html) {\n    const downloadLinks = [];\n    const linkSection = html.match(/<div class=\"dropdown-menu\" aria-labelledby=\"downloadMenuButton\">([\\s\\S]*?)<\\/div>/)[0];\n    const linkMatches = linkSection.matchAll(/<a\\s+class=\"dropdown-item\"\\s+href=\"([^\"]+)\"[^>]*>\\s*<span>([^<]+)<\\/span>/g);\n\n    for (const match of linkMatches) {\n        const qualityMatch = match[2].match(/(\\d+)/);\n        if (qualityMatch) {\n            downloadLinks.push({\n                quality: parseInt(qualityMatch[1]),\n                link: match[1]\n            });\n        }\n    }\n\n    // Sort by highest quality first\n    downloadLinks.sort((a, b) => b.quality - a.quality);\n\n    // Parse description\n    const descMatch = html.match(/<div class=\"video-description\">\\s*<p>([\\s\\S]*?)<\\/p>/);\n    const description = descMatch ? descMatch[1].replace(/<p>|<\\/p>/g, '').trim() : '';\n\n    return {\n        downloadLinks,\n        description\n    };\n}\nconst html = $input.all()[0].json.data;\n\nconst data = extractVideoData(html)\nconsole.log(data);\n\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1100,
        100
      ],
      "id": "c0778746-647e-42a3-b34f-1d31a854e265",
      "name": "Code1"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "77ec84fd-da13-424a-a58a-b12f4192a1d2",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "37cdbe19cad41adf77bc85a2725d2a3b1a65adee3c01658e316a53a3c676bcd0"
  },
  "id": "pJSi0HgLWQps98MG",
  "tags": []
}